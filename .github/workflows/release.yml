on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Build with Gradle
        run: ./gradlew build
      - name: Get Release Version
        id: get_version
        run: VERSION=$(./gradlew currentVersion -q -Prelease.quiet) && echo ::set-output name=VERSION::$VERSION
      - name: Update Fallback Version in Main Branch
        run: |
          # Create a temporary branch from main to update the fallback version
          git fetch origin main
          git checkout main
          git pull origin main
          
          echo "Updating fallback version to ${{ steps.get_version.outputs.VERSION }}"
          echo "# Fallback version for CI environments where Git history is not available" > gradle.properties
          echo "# This is automatically updated during the release process" >> gradle.properties  
          echo "fallback.version=${{ steps.get_version.outputs.VERSION }}" >> gradle.properties
          
          # Check if there are changes to commit
          if ! git diff --quiet gradle.properties; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add gradle.properties
            git commit -m "Update fallback version to ${{ steps.get_version.outputs.VERSION }} [skip ci]"
            git push origin main
            echo "Updated fallback version in main branch"
          else
            echo "No changes needed to gradle.properties"
          fi
          
          # Switch back to the tag for the rest of the release process
          git checkout ${{ github.ref_name }}
      - name: Create Release
        id: create_release
        run: |
          gh release create \
            --generate-notes \
            --title 'Release ${{ steps.get_version.outputs.VERSION }}' \
            ${{ github.ref_name }} \
            build/libs/multiline-regex-datacapture-filter-${{ steps.get_version.outputs.VERSION }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to Maven Central
        run: ./gradlew -PsigningKey=${SIGNING_KEY_B64} -PsigningPassword=${SIGNING_PASSWORD} -PsonatypeUsername=${SONATYPE_USERNAME} -PsonatypePassword=${SONATYPE_PASSWORD} publishToSonatype closeAndReleaseSonatypeStagingRepository
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SIGNING_KEY_B64: ${{ secrets.SIGNING_KEY_B64 }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}